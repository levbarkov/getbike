<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "zakaz".
 *
 * @property int $id
 * @property int $rental_id
 * @property string $user_name
 * @property string $user_email
 * @property string $user_phone
 * @property int $garage_id
 * @property string $date_for
 * @property string $date_to
 * @property string $curr_date
 * @property string $zakaz_info
 * @property int $price
 * @property int $service_tax
 * @property int $pay_id
 * @property int $region_id
 * @property int $status
 * @property string $comment
 * @property string $coord
 *
 * @property Pay $pay
 * @property RegionList $region
 */
class Zakaz extends \yii\db\ActiveRecord
{

    public $filter_date_from;
    public $filter_date_to;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'zakaz';
    }

    public static function getTotal($provider, $columnName, $status = null)
    {
        $total = 0;

        foreach ($provider as $item) {
            if ($status != null) {
                if ($item['status'] != 1 && $item['status'] != 2) continue;
            }
            $total += $item[$columnName];
        }
        return $total;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['rental_id', 'garage_id', 'price', 'pay_id', 'region_id', 'service_tax', 'status'], 'integer'],
            [['date_for', 'date_to', 'curr_date', 'filter_date_from', 'filter_date_to'], 'safe'],
            [['comment'], 'string'],
            [['user_name', 'user_email', 'user_phone', 'zakaz_info', 'coord'], 'string', 'max' => 255],
            [['pay_id'], 'exist', 'skipOnError' => true, 'targetClass' => Pay::className(), 'targetAttribute' => ['pay_id' => 'id']],
            [['region_id'], 'exist', 'skipOnError' => true, 'targetClass' => RegionList::className(), 'targetAttribute' => ['region_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'rental_id' => 'Rental ID',
            'user_name' => 'User Name',
            'user_phone' => 'User Phone',
            'user_email' => 'User Email',
            'garage_id' => 'Garage ID',
            'date_for' => 'Date For',
            'date_to' => 'Date To',
            'curr_date' => 'Curr Date',
            'coord' => 'Coord',
            'price' => 'Price',
            'service_tax' => 'Tax',
            'pay_id' => 'Pay ID',
            'region_id' => 'Region ID',
            'zakaz_info' => 'Order Info',
            'status' => 'Status',
            'comment' => 'Comment',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPay()
    {
        return $this->hasOne(Pay::className(), ['id' => 'pay_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRegion()
    {
        return $this->hasOne(RegionList::className(), ['id' => 'region_id']);
    }

    /*    public function beforeSave($insert)
        {
            if(!parent::beforeSave($insert)){
                return false;
            }
            if($insert === false){
                $order_id = $this->id;
                $rental_id = $this->rental_id;
                $tax = $this->service_tax;
                $old_data = $this->oldAttributes;
                if($old_data['service_tax'] != $tax){

                }


            }
            return true;
        }*/

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        /*        if($insert == false && $this->service_tax != $changedAttributes['service_tax']){
                    $operations = Operations::findOne(['rental_id' => $this->rental_id, 'order_id' => $this->id]);
                    if($operations){
                        $operations->sum = -$this->service_tax;
                        //$operations->save();
                    }
                }*/
        if ($insert === false) {
            //$rental_id = isset($changedAttributes['rental_id']) ? $changedAttributes['rental_id'] : $this->rental_id;

            //$operations = Operations::findOne(['rental_id' => $rental_id, 'order_id' => $this->id]);
            $operations = Operations::findOne(['order_id' => $this->id]);
            if ($operations) {
                if (isset($changedAttributes['service_tax']) && $this->service_tax != $changedAttributes['service_tax']) {
                    if ($operations) {
                        $operations->sum = -$this->service_tax;
                        //$operations->save();
                    }
                }
                if (isset($changedAttributes['rental_id']) && $this->rental_id != $changedAttributes['rental_id']) {
                    $operations->rental_id = $this->rental_id;
                }
                $operations->save();
            }


        }else{
            if(!Operations::find()->where(['order_id' => $this->id])->exists()){
                $operations = new Operations();
                $operations->order_id = $this->id;
                $operations->sum = -$this->service_tax;
                $operations->operations = "Order #$this->id commission";
                $operations->save();
            }
        }

    }

   public function afterDelete()
   {
       parent::afterDelete(); // TODO: Change the autogenerated stub

       $operation = Operations::find()->where(['order_id' => $this->rental_id])->one();
       if($operation){
           $operation->delete();
       }


   }

}
